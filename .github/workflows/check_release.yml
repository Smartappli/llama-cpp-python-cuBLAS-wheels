name: Check for new release of llama-cpp-python 

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions: write-all

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      CONFIGIN: ${{ inputs.config }}
      
    steps:
      - name: ⌛ rate 1
        shell: pwsh
        run: |
          # add random sleep since we run on fixed schedule
          sleep (get-random -max 1200)
          
          # get currently authenticated user rate limit info
          $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
      
          # if we don't have at least 100 requests left, wait until reset
          if ($rate.remaining -lt 350) {
              $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
              echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
              sleep $wait
              $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
              echo "Rate limit has reset to $($rate.remaining) requests"
          }
          
      - uses: actions/checkout@v4
        
      - name: Get latest release
        id: get_release
        run: |
          # Fetch release information and extract the release tag
          RELEASE_TAG=$(curl -s https://api.github.com/repos/abetlen/llama-cpp-python/releases/latest | jq -r '.tag_name')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "latest release: $RELEASE_TAG"

      - name: Compare with previous release
        id: compare_release
        run: |
          # Read the release info from the downloaded artifact
          PREVIOUS_RELEASE=$(cat llama-cpp-python-release-info.txt 2> /dev/null || echo "NONE")
          echo "previous release: $PREVIOUS_RELEASE"

          # Compare the fetched release tag with the previous release tag
          if [ "${{ steps.get_release.outputs.RELEASE_TAG }}" != "$PREVIOUS_RELEASE" ]; then
            echo "release_changed=true" >> $GITHUB_OUTPUT
            echo "Release changed: true"
          else
            echo "release_changed=false" >> $GITHUB_OUTPUT
            echo "Release changed: false"
          fi

      - name: Call workflow to build code
        if: steps.compare_release.outputs.release_changed == 'true'
        uses: benc-uk/workflow-dispatch@v1.2.2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          workflow: build-wheels-full-release.yml
          inputs: '{ "version": "${{ steps.get_release.outputs.RELEASE_TAG }}"}'
      
      - name: Store artifacts
        run: |
          # Store the newly fetched release version in a file
          echo "${{ steps.get_release.outputs.RELEASE_TAG }}" > llama-cpp-python-release-info.txt
          echo "Saved ${{ steps.get_release.outputs.RELEASE_TAG }} to llama-cpp-python-release-info.txt"

      - name: ⌛ rate 2
        shell: pwsh
        run: |
          # add random sleep since we run on fixed schedule
          sleep (get-random -max 1200)
          
          # get currently authenticated user rate limit info
          $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
      
          # if we don't have at least 100 requests left, wait until reset
          if ($rate.remaining -lt 350) {
              $wait = ($rate.reset - (Get-Date (Get-Date).ToUniversalTime() -UFormat %s))
              echo "Rate limit remaining is $($rate.remaining), waiting for $($wait) seconds to reset"
              sleep $wait
              $rate = gh api rate_limit | convertfrom-json | select -expandproperty rate
              echo "Rate limit has reset to $($rate.remaining) requests"
          }

      - name: Upload new file
        if: steps.compare_release.outputs.release_changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          timestamp=$(date +'%Y%m%d%H%M%S')
          branch_name="update-file-$timestamp"
      
          git checkout -b "$branch_name"
      
          git add llama-cpp-python-release-info.txt
      
          git commit -m "Update file"
      
          git push origin "$branch_name"
      
          git checkout main
          git merge --no-ff "$branch_name"
          git push origin main
      
          # delete the temporary branch
          git branch -d "$branch_name"
          git push origin --delete "$branch_name"
